name: Analyze Single Round

on:
  workflow_dispatch:
    inputs:
      round:
        description: 'Round number (1-7)'
        required: true
        type: number
      season:
        description: 'Season number (default: 2)'
        required: false
        default: '2'
        type: number
      depth:
        description: 'Stockfish depth (default: 15)'
        required: false
        default: '15'
        type: number

jobs:
  analyze:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Node dependencies
        run: npm ci

      - name: Install Stockfish
        run: |
          sudo apt-get update
          sudo apt-get install -y stockfish
          stockfish --version

      - name: Install Python dependencies
        run: |
          pip3 install python-chess stockfish

      - name: Fetch round PGN
        id: fetch
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          SEASON="${{ github.event.inputs.season }}"
          ROUND="${{ github.event.inputs.round }}"

          echo "Fetching PGN data for Season $SEASON Round $ROUND..."

          # Get round ID from database
          ROUND_ID=$(node -e "
            const { PrismaClient } = require('@prisma/client');
            const prisma = new PrismaClient();

            (async () => {
              try {
                const season = await prisma.season.findFirst({
                  where: { seasonNumber: parseInt(process.argv[1]) }
                });

                if (!season) throw new Error('Season not found');

                const round = await prisma.round.findFirst({
                  where: {
                    seasonId: season.id,
                    roundNumber: parseInt(process.argv[2])
                  }
                });

                if (!round) throw new Error('Round not found');

                console.log(round.id);
              } finally {
                await prisma.\$disconnect();
              }
            })();
          " $SEASON $ROUND)

          echo "Round ID: $ROUND_ID"
          echo "round_id=$ROUND_ID" >> $GITHUB_OUTPUT

          # Fetch PGN from API endpoint
          PGN_URL="https://classical.schachklub-k4.ch/api/broadcast/round/${ROUND_ID}/pgn"
          echo "Fetching from: $PGN_URL"

          curl -f -s "$PGN_URL" > /tmp/round-${ROUND}.pgn

          if [ ! -s /tmp/round-${ROUND}.pgn ]; then
            echo "Error: Empty PGN file - no games available for this round"
            exit 1
          fi

          echo "PGN file ready:"
          wc -l "/tmp/round-${ROUND}.pgn"

      - name: Run Stockfish Analysis
        run: |
          SEASON="${{ github.event.inputs.season }}"
          ROUND="${{ github.event.inputs.round }}"
          DEPTH="${{ github.event.inputs.depth }}"

          echo "Starting analysis for Season $SEASON Round $ROUND"
          echo "Depth: $DEPTH"
          echo "Start time: $(date)"

          cat /tmp/round-${ROUND}.pgn | \
            node scripts/generate-stats.js \
              --round $ROUND \
              --season $SEASON \
              --analyze \
              --depth $DEPTH

          echo "End time: $(date)"

      - name: Verify output
        run: |
          SEASON="${{ github.event.inputs.season }}"
          ROUND="${{ github.event.inputs.round }}"
          OUTPUT_FILE="public/stats/season-${SEASON}-round-${ROUND}.json"

          if [ ! -f "$OUTPUT_FILE" ]; then
            echo "Error: Stats file not generated at $OUTPUT_FILE"
            exit 1
          fi

          echo "Generated stats file:"
          ls -lh "$OUTPUT_FILE"
          echo "File size: $(du -h "$OUTPUT_FILE" | cut -f1)"

          # Display summary
          echo ""
          echo "Stats Summary:"
          jq -r '"Games: \(.overview.totalGames) | Moves: \(.overview.totalMoves) | Avg: \(.overview.averageMovesPerGame)"' "$OUTPUT_FILE"

      - name: Commit and push results
        run: |
          SEASON="${{ github.event.inputs.season }}"
          ROUND="${{ github.event.inputs.round }}"
          DEPTH="${{ github.event.inputs.depth }}"

          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add public/stats/season-${SEASON}-round-${ROUND}.json

          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            COMMIT_MSG="Add Stockfish analysis for Season $SEASON Round $ROUND"$'\n\n'"Analyzed with depth $DEPTH"$'\n'"Generated by manual workflow trigger"
            git commit -m "$COMMIT_MSG"
            git pull --rebase
            git push
          fi

      - name: Summary
        if: always()
        run: |
          SEASON="${{ github.event.inputs.season }}"
          ROUND="${{ github.event.inputs.round }}"

          if [ -f "public/stats/season-${SEASON}-round-${ROUND}.json" ]; then
            echo "✅ Successfully analyzed Season $SEASON Round $ROUND"
          else
            echo "❌ Failed to analyze Season $SEASON Round $ROUND"
          fi
