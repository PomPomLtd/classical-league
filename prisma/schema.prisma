// Classical Chess League Database Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Global settings
model Settings {
  id              String   @id @default(cuid())
  tournamentLink  String?  @map("tournamentLink") // SwissSystem.org tournament link
  createdAt       DateTime @default(now()) @map("createdAt")
  updatedAt       DateTime @updatedAt @map("updatedAt")

  @@map("settings")
}

// Admin configuration settings
model AdminSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now()) @map("createdAt")
  updatedAt   DateTime @updatedAt @map("updatedAt")

  @@map("admin_settings")
}

// Season management
model Season {
  id           String   @id @default(cuid())
  seasonNumber Int      @unique @map("seasonNumber")
  name         String
  startDate    DateTime @map("startDate")
  endDate      DateTime @map("endDate")
  isActive     Boolean  @default(false) @map("isActive")
  createdAt    DateTime @default(now()) @map("createdAt")
  updatedAt    DateTime @updatedAt @map("updatedAt")

  players     Player[]
  rounds      Round[]

  @@map("seasons")
}

// Players in the league
model Player {
  id             String    @id @default(cuid())
  seasonId       String    @map("seasonId")
  fullName       String    @map("fullName")
  email          String
  nickname       String
  phoneNumber    String    @map("phoneNumber")
  lichessRating  Int       @default(1500) @map("lichessRating") // Estimated classical rating for Swiss pairings
  registrationDate DateTime @default(now()) @map("registrationDate")
  rulesAccepted  Boolean   @default(true) @map("rulesAccepted")
  isApproved     Boolean   @default(false) @map("isApproved")
  approvedDate   DateTime? @map("approvedDate")
  isWithdrawn    Boolean   @default(false) @map("isWithdrawn")
  withdrawalDate DateTime? @map("withdrawalDate")

  season         Season      @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  byeRequests    ByeRequest[]
  whiteGames     GameResult[] @relation("WhitePlayer")
  blackGames     GameResult[] @relation("BlackPlayer")
  submittedResults GameResult[] @relation("SubmittedBy")
  wonGames       GameResult[] @relation("WinningPlayer")

  @@unique([seasonId, email])
  @@unique([seasonId, nickname])
  @@map("players")
}

// Tournament rounds
model Round {
  id                   String    @id @default(cuid())
  seasonId             String    @map("seasonId")
  roundNumber          Int       @map("roundNumber")
  roundDate            DateTime  @map("roundDate")
  byeDeadline          DateTime  @map("byeDeadline") // Wednesday noon before round
  createdAt            DateTime  @default(now()) @map("createdAt")
  pgnFilePath          String?   @map("pgn_file_path")
  pgnUpdatedAt         DateTime? @map("pgn_updated_at")
  lichessBroadcastUrl  String?   @map("lichess_broadcast_url")

  season       Season       @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  byeRequests  ByeRequest[]
  gameResults  GameResult[]

  @@unique([seasonId, roundNumber])
  @@map("rounds")
}

// Bye requests from players
model ByeRequest {
  id             String    @id @default(cuid())
  playerId       String    @map("playerId")
  roundId        String?   @map("roundId")
  requestedDate  DateTime  @default(now()) @map("requestedDate")
  isApproved     Boolean?  @map("isApproved") // null = pending, true = approved, false = rejected
  approvedDate   DateTime? @map("approvedDate")
  adminNotes     String?   @map("adminNotes")

  player         Player    @relation(fields: [playerId], references: [id], onDelete: Cascade)
  round          Round?    @relation(fields: [roundId], references: [id], onDelete: Cascade)

  @@index([playerId, roundId])
  @@map("bye_requests")
}

// Game results submitted by players
model GameResult {
  id               String    @id @default(cuid())
  roundId          String    @map("roundId")
  boardNumber      Int       @map("boardNumber")
  result           GameResultEnum
  pgn              String?   @db.Text  // Now optional for forfeit games
  forfeitReason    String?   @db.Text @map("forfeit_reason")  // Explanation for forfeit (scheduling issues, no-show, etc.)
  submittedDate    DateTime  @default(now()) @map("submittedDate")
  submittedById    String?   @map("submittedById")
  isVerified       Boolean   @default(false) @map("isVerified")
  verifiedDate     DateTime? @map("verifiedDate")
  adminNotes       String?   @map("adminNotes")
  whitePlayerId    String?   @map("whitePlayerId") // Added by admin
  blackPlayerId    String?   @map("blackPlayerId") // Added by admin
  winningPlayerId  String?   @map("winningPlayerId") // Submitted by player to help identify pairing

  round            Round     @relation(fields: [roundId], references: [id], onDelete: Cascade)
  submittedBy      Player?   @relation("SubmittedBy", fields: [submittedById], references: [id])
  whitePlayer      Player?   @relation("WhitePlayer", fields: [whitePlayerId], references: [id])
  blackPlayer      Player?   @relation("BlackPlayer", fields: [blackPlayerId], references: [id])
  winningPlayer    Player?   @relation("WinningPlayer", fields: [winningPlayerId], references: [id])

  @@unique([roundId, boardNumber])
  @@map("game_results")
}

// Admin users
model Admin {
  id           String    @id @default(cuid())
  username     String    @unique
  passwordHash String    @map("passwordHash")
  lastLogin    DateTime? @map("lastLogin")
  createdAt    DateTime  @default(now()) @map("createdAt")
  updatedAt    DateTime  @updatedAt @map("updatedAt")

  @@map("admins")
}

enum GameResultEnum {
  WHITE_WIN      // 1-0
  BLACK_WIN      // 0-1
  DRAW           // 1/2-1/2
  WHITE_WIN_FF   // 1-0 FF (forfeit)
  BLACK_WIN_FF   // 0-1 FF (forfeit)
  DOUBLE_FF      // 0-0 FF (double forfeit)
  DRAW_FF        // 1/2F-1/2F (scheduling draw)
}
